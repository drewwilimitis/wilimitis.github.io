---
layout: page
title: ray marching
description:
img: /assets/img/2018-09-30-project.gif
---

<img class="col three" src="{{ site.baseurl }}/assets/img/2018-09-30-project.gif">

[source code](https://www.shadertoy.com/view/4t3Bzr)

Being particularly inspired by the works created on [Shadertoy](https://www.shadertoy.com) and wanting to further my understanding of the primitives underlying modern computer graphics rendering techniques, I decided to begin working through ray marching, an algorithm which can be found in a number of remarkable shaders.

- [Frozen wasteland by Dave_Hoskins](https://www.shadertoy.com/view/Xls3D2)
- [Maze Lattice by Shane](https://www.shadertoy.com/view/llGGzh)
- [Rainforest by iq](https://www.shadertoy.com/view/4ttSWf)

The distinctions between ray "marching", "tracing", and "casting" were difficult to reason about initially, however the most important distinction to recognize it seems is the algorithmic difference between computing an exact intersection between a ray and an object and performing an iterative estimation of said intersection. The latter will be considered "ray marching" from this point onward.

Having visited this topic a number of times and finding it impenetrable for a number of reasons (nearly unrecognizable code in shader examples, requiring a rebuilding of linear algebra intuition, and lack of centralization of information), I attempted to synthesize knowledge from various mediums:

From articles posted by luminaries such as Inigo Quilez
- <http://www.iquilezles.org/www/articles/raymarchingdf/raymarchingdf.htm>

To YouTube live coding sessions
- <https://www.youtube.com/watch?v=dKA5ZVALOhs&list=PLH2UW4EHEfFrAnVs_z4nriRRdNxfaOEXW>
- <https://www.youtube.com/watch?v=yxNnRSefK94>

To demoscene forums
- <http://www.pouet.net/topic.php?which=7920>

To the number one result when searching "ray marching algorithm"
- Jamie Wong's brilliant article (tutorial?) <http://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/>

Alas, an interactive shader tutorial written by reinder <https://www.shadertoy.com/view/4dSfRc> proved to be the most helpful in building an intuition for the algorithm from an implementation perspective.
