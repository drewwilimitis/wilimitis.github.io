---
layout: page
title: model renderer
description:
img: /assets/img/2018-12-10-project-1.png
---

<img class="col" src="{{ site.baseurl }}/assets/img/2018-12-10-project-1.png">

[source code](https://github.com/wilimitis/tracer)

There are tradeoffs to branching outside of Shadertoy and creating a custom c++ tracer. The high-level, primary benefit which compelled me to pursue this task is that I can create more complex lighting paths in a more organized manner. That's not to say folks aren't creating brilliant lighting systems on Shadertoy - as I've mentioned before, they are.

For instance, I kept encountering a situation in Shadertoy when attempting to calculate recursive reflection and refraction rays where I'm not compelled to introduce my own stack design and also don't want to take a partial approach to gathering light from some, but not all, branches.

<img class="col" src="{{ site.baseurl }}/assets/img/2018-12-10-project-2.png">

_opting out of the high-poly render due to time and GPU constraints_

Thus, I began following along with the University of Utah Ray Tracing course in which, over the semester, the students implement various direct illumination features and, ultimately, implement indirect illumination features. The bootstrapped OpenGL reference code is available online and seemed suitable for beginning this journey. Of course, one of my near-term projects will be minimizing and reconstructing the sample code.

The above image is a culmination of implementing algorithms to support
- coordinate space transformations: screen, camera, world, object
- recursive scene graph scaling
- naïve lighting: ambient, diffuse, specular
- naïve shadow rays
- recursive reflective lighting
- recursive refractive lighting
- polygonal meshes via Möller-Trumbore

I immediately realized the difficulties that would result from attempting to follow along _outside_ the class, however didn't give up and worked my way through the first 5 projects before branching off and approaching global illumination. Perhaps the most useful resource I found, and I can't actually reiterate this enough, was Dr. Shirley's [Fundamentals of Computer Graphics](https://www.cs.cornell.edu/~srm/fcg4/).
