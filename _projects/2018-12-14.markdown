---
layout: page
title: indirect illumination i
description:
img: /assets/img/2018-12-14-project-1.png
---

<div class="img_row">
  <img class="col one" src="{{ site.baseurl }}/assets/img/2018-12-14-project-3.png">
  <img class="col one" src="{{ site.baseurl }}/assets/img/2018-12-14-project-2.png">
  <img class="col one" src="{{ site.baseurl }}/assets/img/2018-12-14-project-1.png">
</div>
_left to right: OpenGL reference, ray traced Blinn-Phong, weighted Monte Carlo indirect illumination_

[source code](https://github.com/wilimitis/tracer)

A first pass at implementing indirect illumination by toying with some of the mathematical machinery introduced in _FoCG_.

The above image is a culmination of implementing algorithms to support
- uniformly sampling the unit hemisphere
- naïve Monte Carlo indirect illumination

There are a number of techniques which could the overall smoothness of the produced image
- taking more indirect illumination samples per hit
- taking more than 1 sample per pixel
- enlarging the screen size
- gamma correction

The code approximates a solution to the rendering equation
```
Ls(ko) = ∫ 𝜌(ki, ko) Lf(ki) cos𝜃i d𝜎i
```

or, less formally,
```
reflected radiance at a point on a surface in direction ko =
  BRDF of directions ki and ko *
    field radiance coming from direction ki *
    cosine of ki and the surface normal *
    change in solid angle at x
for all directions ki
```
